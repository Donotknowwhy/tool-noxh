// Script ƒë∆∞·ª£c inject tr·ª±c ti·∫øp v√†o page context (kh√¥ng ph·∫£i content script)
// C√≥ th·ªÉ override window.alert th·ª±c s·ª±

(function() {
  'use strict';

  console.log('üîß [AutoSubmit Inject] Script ƒë√£ ƒë∆∞·ª£c inject v√†o page context');

  // State
  let isRunning = false;
  let retryCount = 0;
  let successCount = 0;
  let failCount = 0;
  let baseDelay = 2000; // ms - delay c∆° b·∫£n
  let minDelay = 1500; // ms - delay t·ªëi thi·ªÉu
  let maxDelay = 5000; // ms - delay t·ªëi ƒëa
  let originalAlert = window.alert;
  let alertBlocked = false;

  // H√†m t√≠nh delay th√¥ng minh
  function calculateSmartDelay() {
    // Random delay t·ª´ 1.5s ƒë·∫øn 5s
    const randomDelay = minDelay + Math.random() * (maxDelay - minDelay);

    // TƒÉng delay d·∫ßn khi submit nhi·ªÅu (m·ªói 10 l·∫ßn submit, tƒÉng th√™m 500ms)
    const progressiveDelay = Math.floor(retryCount / 10) * 500;

    // T·ªïng delay (nh∆∞ng kh√¥ng qu√° maxDelay)
    const totalDelay = Math.min(randomDelay + progressiveDelay, maxDelay);

    return Math.floor(totalDelay);
  }

  // Override window.alert NGAY L·∫¨P T·ª®C
  window.alert = function(message) {
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üì¢ [ALERT INTERCEPTED]: "${message}"`);
    console.log(`üèÉ isRunning: ${isRunning}`);

    // Ki·ªÉm tra n·∫øu l√† l·ªói "qu√° t·∫£i" ho·∫∑c "nhi·ªÅu ng∆∞·ªùi"
    const isServerBusy = message.includes('qu√° t·∫£i') ||
                        message.includes('nhi·ªÅu ng∆∞·ªùi') ||
                        message.includes('th·ª≠ l·∫°i') ||
                        message.includes('busy') ||
                        message.toLowerCase().includes('please try again');

    console.log(`‚ö†Ô∏è Server busy detected: ${isServerBusy}`);

    // QUAN TR·ªåNG: Ch·∫∑n HO√ÄN TO√ÄN alert l·ªói server (k·ªÉ c·∫£ khi tool ƒë√£ d·ª´ng)
    if (isServerBusy) {
      console.log(`üö´ [ALERT BLOCKED] Ch·∫∑n alert l·ªói server (isRunning=${isRunning})`);

      // N·∫øu tool ƒëang ch·∫°y, t·ª± ƒë·ªông retry
      if (isRunning) {
        console.log('‚úÖ [AUTO RETRY] Tool ƒëang ch·∫°y, t·ª± ƒë·ªông retry...');
        alertBlocked = true;
        failCount++;

        // Hi·ªÉn th·ªã notification v·ªõi n·ªôi dung alert
        log(`‚ö†Ô∏è Alert: "${message}"`, 'error');

        // T√≠nh delay th√¥ng minh tr∆∞·ªõc khi retry
        const retryDelay = calculateSmartDelay();
        log(`üîÑ T·ª± ƒë·ªông retry sau ${(retryDelay/1000).toFixed(1)}s...`, 'warning');

        // T·ª± ƒë·ªông retry v·ªõi delay th√¥ng minh
        setTimeout(() => {
          console.log('üîÑ Retry ngay...');
          autoSubmit();
        }, retryDelay);
      } else {
        // Tool ƒë√£ d·ª´ng, nh∆∞ng v·∫´n KH√îNG hi·ªÉn th·ªã alert l·ªói server
        console.log('‚ÑπÔ∏è Tool ƒë√£ d·ª´ng, nh∆∞ng v·∫´n ch·∫∑n alert l·ªói server');
        console.log(`‚ÑπÔ∏è Alert b·ªã ch·∫∑n: "${message}"`);
      }

      // KH√îNG hi·ªÉn th·ªã alert popup trong m·ªçi tr∆∞·ªùng h·ª£p
      return undefined;
    }

    // C√°c tr∆∞·ªùng h·ª£p kh√°c (c√≥ th·ªÉ l√† th√¥ng b√°o th√†nh c√¥ng)
    console.log('‚ö†Ô∏è PH√ÅT HI·ªÜN ALERT KH√ÅC - D·ª´ng auto submit!');
    console.log(`Alert message: "${message}"`);

    // D·ª™NG auto submit
    if (isRunning) {
      isRunning = false;
      log(`üéâ C√≥ alert kh√°c xu·∫•t hi·ªán - D·ª´ng auto submit!`, 'success');
      log(`üì¢ Alert: "${message}"`, 'success');
      updateControlsUI();
    }

    // Hi·ªÉn th·ªã alert b√¨nh th∆∞·ªùng
    return originalAlert.call(window, message);
  };

  console.log('‚úÖ window.alert ƒë√£ ƒë∆∞·ª£c override th√†nh c√¥ng!');

  // H√†m t√¨m v√† click v√†o captcha checkbox (n·∫øu c·∫ßn)
  function tryClickCaptchaCheckbox() {
    // T√¨m iframe captcha
    const captchaIframe = document.querySelector('iframe[src*="turnstile"], iframe[src*="cloudflare"], iframe[src*="challenges"]');

    if (captchaIframe) {
      try {
        // Click v√†o iframe ƒë·ªÉ trigger captcha
        const rect = captchaIframe.getBoundingClientRect();
        const x = rect.left + rect.width / 2;
        const y = rect.top + rect.height / 2;

        console.log('üñ±Ô∏è [Captcha] Trying to click captcha iframe at', x, y);

        // Simulate click
        captchaIframe.click();

        // Ho·∫∑c click v√†o parent container
        if (captchaIframe.parentElement) {
          captchaIframe.parentElement.click();
          console.log('üñ±Ô∏è [Captcha] Clicked captcha parent container');
        }

        return true;
      } catch (e) {
        console.log('‚ö†Ô∏è [Captcha] Cannot click iframe:', e.message);
      }
    }

    // T√¨m checkbox/input trong captcha container
    const captchaCheckbox = document.querySelector('input[type="checkbox"][id*="captcha"], input[type="checkbox"][class*="captcha"]');
    if (captchaCheckbox && !captchaCheckbox.checked) {
      console.log('üñ±Ô∏è [Captcha] Found unchecked captcha checkbox, clicking...');
      captchaCheckbox.click();
      return true;
    }

    return false;
  }

  // H√†m check Cloudflare Turnstile captcha ƒë√£ verify ch∆∞a
  function isCaptchaVerified() {
    // Cloudflare Turnstile th∆∞·ªùng c√≥ c√°c d·∫•u hi·ªáu sau khi verify th√†nh c√¥ng:

    // 1. Check input hidden c√≥ value (Turnstile response token) - PH∆Ø∆†NG PH√ÅP CH√çNH
    const turnstileInput = document.querySelector('input[name="cf-turnstile-response"]');
    if (turnstileInput && turnstileInput.value && turnstileInput.value.length > 0) {
      console.log('‚úÖ Captcha verified: Found turnstile response token (length:', turnstileInput.value.length + ')');
      return true;
    }

    // 2. Check text "Th√†nh c√¥ng!" xu·∫•t hi·ªán (nh∆∞ trong Cloudflare Turnstile)
    const allElements = document.querySelectorAll('*');
    for (const el of allElements) {
      const text = el.textContent?.trim();
      // Ch·ªâ check c√°c element nh·ªè (kh√¥ng ph·∫£i body hay container l·ªõn)
      if (text === 'Th√†nh c√¥ng!' && el.children.length === 0) {
        console.log('‚úÖ Captcha verified: Found "Th√†nh c√¥ng!" text');
        return true;
      }
    }

    // 3. Check SVG checkmark (d·∫•u tick xanh) c·ªßa Cloudflare
    const checkmarkSvg = document.querySelector('svg[aria-label*="success"], svg[aria-label*="Success"], svg path[fill="#00ff00"], svg path[fill="green"]');
    if (checkmarkSvg) {
      console.log('‚úÖ Captcha verified: Found success checkmark SVG');
      return true;
    }

    // 4. Check iframe captcha c√≥ class "success" ho·∫∑c t∆∞∆°ng t·ª±
    const captchaIframe = document.querySelector('iframe[src*="turnstile"], iframe[src*="cloudflare"], iframe[src*="challenges"]');
    if (captchaIframe) {
      const parent = captchaIframe.parentElement;
      if (parent) {
        const parentClass = parent.className || '';
        if (parentClass.includes('success') || parentClass.includes('verified') || parentClass.includes('complete')) {
          console.log('‚úÖ Captcha verified: Parent has success class');
          return true;
        }
      }
    }

    // 5. Check container captcha c√≥ data-attribute success
    const captchaContainer = document.querySelector('[data-state="success"], [data-status="success"], [data-verified="true"]');
    if (captchaContainer) {
      console.log('‚úÖ Captcha verified: Found success data attribute');
      return true;
    }

    return false;
  }

  // H√†m ƒë·ª£i captcha verify (v·ªõi timeout)
  async function waitForCaptchaVerify(maxWaitTime = 60000) {
    const startTime = Date.now();
    let logCount = 0;
    let userNotified = false;
    let autoClickAttempts = 0;
    let maxAutoClickAttempts = 3;

    console.log('üîç [Captcha Check] B·∫Øt ƒë·∫ßu ki·ªÉm tra captcha...');

    while (Date.now() - startTime < maxWaitTime) {
      if (isCaptchaVerified()) {
        log('‚úÖ Captcha ƒë√£ verify th√†nh c√¥ng!', 'success');
        console.log('‚úÖ [Captcha Check] TH√ÄNH C√îNG - Captcha ƒë√£ verify!');
        return true;
      }

      // Log m·ªói v√†i gi√¢y ƒë·ªÉ user bi·∫øt ƒëang ƒë·ª£i
      logCount++;
      if (logCount === 1) {
        log('‚è≥ ƒêang ƒë·ª£i captcha verify...', 'warning', 5000);
      } else if (logCount === 6) {
        // Sau 3s (6 * 500ms), th·ª≠ click v√†o captcha l·∫ßn 1
        console.log('ü§ñ [Captcha Auto] Th·ª≠ t·ª± ƒë·ªông click captcha (l·∫ßn 1)...');
        if (tryClickCaptchaCheckbox()) {
          log('üñ±Ô∏è ƒê√£ th·ª≠ click captcha t·ª± ƒë·ªông...', 'info', 3000);
          autoClickAttempts++;
        }
      } else if (logCount === 14) {
        // Sau 7s (14 * 500ms), th·ª≠ click v√†o captcha l·∫ßn 2
        console.log('ü§ñ [Captcha Auto] Th·ª≠ t·ª± ƒë·ªông click captcha (l·∫ßn 2)...');
        if (tryClickCaptchaCheckbox()) {
          autoClickAttempts++;
        }
      } else if (logCount === 20 && !userNotified) {
        // Sau 10s (20 * 500ms) v·∫´n ch∆∞a verify
        console.log('‚ö†Ô∏è [Captcha Check] Captcha ch∆∞a verify sau 10s');
        console.log('üí° [Captcha Check] C√≥ th·ªÉ captcha y√™u c·∫ßu thao t√°c th·ªß c√¥ng');
        console.log(`ü§ñ [Captcha Auto] ƒê√£ th·ª≠ auto-click ${autoClickAttempts} l·∫ßn`);
        log('‚ö†Ô∏è Captcha c√≥ th·ªÉ c·∫ßn t√≠ch th·ªß c√¥ng!', 'warning', 8000);
        userNotified = true;

        // Th·ª≠ click l·∫ßn 3
        if (autoClickAttempts < maxAutoClickAttempts) {
          console.log('ü§ñ [Captcha Auto] Th·ª≠ t·ª± ƒë·ªông click captcha (l·∫ßn 3)...');
          tryClickCaptchaCheckbox();
          autoClickAttempts++;
        }
      } else if (logCount % 10 === 0) {
        // Log m·ªói 5s (10 l·∫ßn * 500ms)
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        console.log(`‚è≥ [Captcha Check] ƒê√£ ƒë·ª£i ${elapsed}s... (ƒëang ch·ªù captcha)`);
      }

      // Check m·ªói 500ms
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    log('‚ùå Timeout: Captcha ch∆∞a verify sau 60 gi√¢y', 'error');
    log('üí° Th·ª≠ refresh trang ho·∫∑c ƒë·ª£i √≠t submit h∆°n', 'warning', 10000);
    console.log('‚ùå [Captcha Check] TIMEOUT - Captcha ch∆∞a verify sau 60 gi√¢y');
    console.log(`ü§ñ [Captcha Auto] ƒê√£ th·ª≠ auto-click ${autoClickAttempts} l·∫ßn nh∆∞ng kh√¥ng th√†nh c√¥ng`);
    console.log('üí° [Captcha Check] Khuy·∫øn ngh·ªã: Refresh trang ho·∫∑c ƒë·ª£i v√†i ph√∫t ƒë·ªÉ IP kh√¥ng b·ªã ƒë√°nh d·∫•u');
    return false;
  }

  // H√†m t√¨m submit button
  function findSubmitButton() {
    const selectors = [
      '#btn-upload-file',
      'button[type="submit"]',
      'input[type="submit"]',
      'button.submit',
      'button[class*="submit"]',
      'button[class*="Submit"]',
      'button.btn-submit',
      'button#submit'
    ];

    for (const selector of selectors) {
      const button = document.querySelector(selector);
      if (button && button.offsetParent !== null) {
        console.log(`‚úÖ T√¨m th·∫•y submit button: ${selector}`);
        return button;
      }
    }
    return null;
  }

  // Container cho t·∫•t c·∫£ notifications
  let notificationContainer = null;

  function getNotificationContainer() {
    if (!notificationContainer || !document.body.contains(notificationContainer)) {
      notificationContainer = document.createElement('div');
      notificationContainer.id = 'autoSubmitNotifications';
      notificationContainer.style.cssText = `
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 999999;
        display: flex;
        flex-direction: column;
        gap: 10px;
        pointer-events: none;
        max-width: 500px;
        min-width: 300px;
      `;
      document.body.appendChild(notificationContainer);
    }
    return notificationContainer;
  }

  // H√†m log v·ªõi notification
  function log(message, type = 'info', duration = 3000) {
    const icon = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`${icon} [AutoSubmit] ${message}`);

    // Hi·ªÉn th·ªã notification
    const timestamp = new Date().toLocaleTimeString();
    const notification = document.createElement('div');
    notification.textContent = `[${timestamp}] ${icon} ${message}`;

    // M√†u background theo type
    let bgColor = '#333';
    if (type === 'success') bgColor = '#4CAF50';
    if (type === 'error') bgColor = '#f44336';
    if (type === 'warning') bgColor = '#ff9800';

    notification.style.cssText = `
      background: ${bgColor};
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      font-size: 13px;
      box-shadow: 0 4px 16px rgba(0,0,0,0.4);
      word-wrap: break-word;
      animation: slideInDown 0.3s ease-out;
      pointer-events: auto;
      text-align: center;
    `;

    // Th√™m CSS animation n·∫øu ch∆∞a c√≥
    if (!document.getElementById('autoSubmitNotificationStyles')) {
      const style = document.createElement('style');
      style.id = 'autoSubmitNotificationStyles';
      style.textContent = `
        @keyframes slideInDown {
          from {
            transform: translateY(-100px);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        @keyframes slideOutUp {
          from {
            transform: translateY(0);
            opacity: 1;
          }
          to {
            transform: translateY(-100px);
            opacity: 0;
          }
        }
      `;
      document.head.appendChild(style);
    }

    const container = getNotificationContainer();
    container.appendChild(notification);

    // Alert messages hi·ªÉn th·ªã l√¢u h∆°n (5s)
    const displayTime = message.includes('Alert:') ? 5000 : duration;
    setTimeout(() => {
      notification.style.animation = 'slideOutUp 0.3s ease-in';
      setTimeout(() => notification.remove(), 300);
    }, displayTime);
  }

  // H√†m highlight button khi click
  function highlightButton(button) {
    const originalBg = button.style.background;
    const originalBorder = button.style.border;

    button.style.background = '#ff0000';
    button.style.border = '3px solid #ffff00';
    button.style.transition = 'all 0.3s';

    setTimeout(() => {
      button.style.background = originalBg;
      button.style.border = originalBorder;
    }, 500);
  }

  // H√†m t·ª± ƒë·ªông submit
  async function autoSubmit() {
    if (!isRunning) {
      log('D·ª´ng auto submit');
      return;
    }

    const submitButton = findSubmitButton();

    if (!submitButton) {
      log('‚ùå KH√îNG T√åM TH·∫§Y N√öT SUBMIT!', 'error');
      log('ƒêang th·ª≠ t√¨m l·∫°i sau 3 gi√¢y...', 'warning');
      setTimeout(autoSubmit, 3000);
      return;
    }

    retryCount++;
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üîÑ [SUBMIT #${retryCount}] B·∫Øt ƒë·∫ßu l·∫ßn submit th·ª© ${retryCount}`);
    console.log(`üìç Submit button text: "${submitButton.textContent || submitButton.value}"`);
    console.log(`üìç Submit button ID: ${submitButton.id || 'N/A'}`);
    console.log(`üìç Submit button class: ${submitButton.className || 'N/A'}`);

    log(`üîÑ L·∫ßn submit th·ª© ${retryCount}...`, 'info');

    // Reset alert blocked flag
    alertBlocked = false;

    // Scroll v√†o view submit button
    submitButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
    await new Promise(resolve => setTimeout(resolve, 300));

    // **QUAN TR·ªåNG: ƒê·ª¢I CAPTCHA VERIFY TR∆Ø·ªöC KHI SUBMIT**
    log('üîç Ki·ªÉm tra captcha...', 'warning');
    const captchaVerified = await waitForCaptchaVerify(30000);

    if (!captchaVerified) {
      log('‚ùå Captcha ch∆∞a verify! Skip l·∫ßn n√†y v√† retry...', 'error');
      if (isRunning) {
        setTimeout(autoSubmit, 2000);
      }
      return;
    }

    // Captcha ƒë√£ OK, ti·∫øn h√†nh click submit
    console.log(`‚úÖ Captcha OK! ƒêang CLICK submit button...`);
    console.log(`‚è∞ Th·ªùi gian: ${new Date().toLocaleTimeString()}`);

    log(`üñ±Ô∏è ƒêANG CLICK SUBMIT BUTTON...`, 'success', 2000);

    // Highlight button ƒë·ªÉ d·ªÖ th·∫•y
    highlightButton(submitButton);

    // Click submit
    submitButton.click();
    console.log(`‚úÖ ƒê√É CLICK submit button!`);

    // ƒê·ª£i ƒë·ªÉ xem c√≥ alert kh√¥ng
    await new Promise(resolve => setTimeout(resolve, 1500));

    console.log(`üìä Alert blocked: ${alertBlocked}`);
    console.log(`üìä Is running: ${isRunning}`);

    // N·∫øu alert b·ªã block, retry s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ window.alert override
    if (!alertBlocked && isRunning) {
      // Kh√¥ng c√≥ alert l·ªói, c√≥ th·ªÉ th√†nh c√¥ng ho·∫∑c ch∆∞a ph·∫£n h·ªìi
      // T√≠nh delay th√¥ng minh
      const nextDelay = calculateSmartDelay();
      const delaySeconds = (nextDelay / 1000).toFixed(1);

      console.log(`‚è≥ Ch·ªù ${nextDelay}ms (${delaySeconds}s) tr∆∞·ªõc l·∫ßn submit ti·∫øp theo...`);
      console.log(`üìà Stats: Success=${successCount}, Fail=${failCount}, Total=${retryCount}`);
      log(`‚è≥ Ch·ªù ${delaySeconds}s tr∆∞·ªõc l·∫ßn ti·∫øp...`, 'info');

      setTimeout(autoSubmit, nextDelay);
    }
  }

  // Update UI controls
  function updateControlsUI() {
    const startBtn = document.getElementById('autoSubmitStart');
    const stopBtn = document.getElementById('autoSubmitStop');
    const status = document.getElementById('autoSubmitStatus');

    if (isRunning) {
      if (startBtn) startBtn.style.display = 'none';
      if (stopBtn) stopBtn.style.display = 'inline-block';
      if (status) {
        const successRate = retryCount > 0 ? ((successCount / retryCount) * 100).toFixed(0) : 0;
        status.innerHTML = `üü¢ ƒêang ch·∫°y - L·∫ßn ${retryCount}<br><small style="font-size: 10px; opacity: 0.8;">‚úÖ${successCount} | ‚ùå${failCount}</small>`;
        status.style.color = '#4CAF50';
      }
    } else {
      if (startBtn) startBtn.style.display = 'inline-block';
      if (stopBtn) stopBtn.style.display = 'none';
      if (status) {
        if (retryCount > 0) {
          status.innerHTML = `‚è∏Ô∏è ƒê√£ d·ª´ng<br><small style="font-size: 10px; opacity: 0.8;">T·ªïng: ${retryCount} | ‚úÖ${successCount} | ‚ùå${failCount}</small>`;
        } else {
          status.textContent = '‚è∏Ô∏è ƒê√£ d·ª´ng';
        }
        status.style.color = 'white';
      }
    }
  }

  // H√†m start
  function start() {
    if (isRunning) {
      log('Auto submit ƒëang ch·∫°y r·ªìi!', 'warning');
      return;
    }

    isRunning = true;
    retryCount = 0;
    successCount = 0;
    failCount = 0;
    log('üöÄ B·∫Øt ƒë·∫ßu auto submit!', 'success');
    log(`‚öôÔ∏è Ch·∫°y li√™n t·ª•c cho ƒë·∫øn khi b·∫•m D·ª´ng`, 'info');
    log(`‚è±Ô∏è Delay: ${minDelay/1000}s - ${maxDelay/1000}s (random)`, 'info');

    // Ki·ªÉm tra DevTools c√≥ ƒëang m·ªü kh√¥ng
    const isDevToolsOpen = window.outerWidth - window.innerWidth > 160 ||
                           window.outerHeight - window.innerHeight > 160;
    if (isDevToolsOpen) {
      console.log('‚ö†Ô∏è [WARNING] DevTools (F12) ƒëang m·ªü!');
      console.log('üí° [TIP] Captcha c√≥ th·ªÉ y√™u c·∫ßu thao t√°c th·ªß c√¥ng');
      console.log('üí° [TIP] ƒê·ªÉ captcha auto-verify, khuy·∫øn ngh·ªã ƒë√≥ng DevTools');
      log('‚ö†Ô∏è DevTools ƒëang m·ªü - Captcha c√≥ th·ªÉ c·∫ßn t√≠ch th·ªß c√¥ng', 'warning', 8000);
    } else {
      console.log('‚úÖ [INFO] DevTools ƒë√£ ƒë√≥ng - Captcha s·∫Ω auto-verify');
      log('‚úÖ Captcha s·∫Ω t·ª± ƒë·ªông verify', 'success', 3000);
    }

    updateControlsUI();
    autoSubmit();
  }

  // H√†m stop
  function stop() {
    if (!isRunning) {
      log('Auto submit ch∆∞a ch·∫°y!', 'warning');
      return;
    }

    isRunning = false;
    log(`‚èπÔ∏è D·ª´ng auto submit. T·ªïng: ${retryCount} l·∫ßn th·ª≠`, 'warning');

    updateControlsUI();
  }

  // H√†m t·∫°o UI controls
  function createControls() {
    if (document.getElementById('autoSubmitControls')) {
      return;
    }

    const controls = document.createElement('div');
    controls.id = 'autoSubmitControls';
    controls.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      padding: 15px 20px;
      border-radius: 10px;
      box-shadow: 0 8px 32px rgba(0,0,0,0.3);
      z-index: 999998;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      color: white;
      min-width: 220px;
    `;

    const title = document.createElement('div');
    title.textContent = 'üöÄ Auto Submit v2';
    title.style.cssText = 'font-size: 16px; font-weight: bold; margin-bottom: 10px;';

    const status = document.createElement('div');
    status.id = 'autoSubmitStatus';
    status.textContent = '‚è∏Ô∏è ƒê√£ d·ª´ng';
    status.style.cssText = 'font-size: 12px; margin-bottom: 10px; opacity: 0.9;';

    const startBtn = document.createElement('button');
    startBtn.id = 'autoSubmitStart';
    startBtn.textContent = '‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu';
    startBtn.onclick = start;
    startBtn.style.cssText = `
      background: #4CAF50;
      border: none;
      color: white;
      padding: 8px 16px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      margin-right: 5px;
      font-weight: bold;
    `;
    startBtn.onmouseover = () => startBtn.style.background = '#45a049';
    startBtn.onmouseout = () => startBtn.style.background = '#4CAF50';

    const stopBtn = document.createElement('button');
    stopBtn.id = 'autoSubmitStop';
    stopBtn.textContent = '‚èπÔ∏è D·ª´ng';
    stopBtn.onclick = stop;
    stopBtn.style.display = 'none';
    stopBtn.style.cssText = `
      background: #f44336;
      border: none;
      color: white;
      padding: 8px 16px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      margin-right: 5px;
      font-weight: bold;
      display: none;
    `;
    stopBtn.onmouseover = () => stopBtn.style.background = '#da190b';
    stopBtn.onmouseout = () => stopBtn.style.background = '#f44336';

    controls.appendChild(title);
    controls.appendChild(status);
    controls.appendChild(startBtn);
    controls.appendChild(stopBtn);

    document.body.appendChild(controls);

    // Auto update status
    setInterval(updateControlsUI, 500);
  }

  // Load UI khi DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', createControls);
  } else {
    createControls();
  }

  // Expose functions
  window.autoSubmitStart = start;
  window.autoSubmitStop = stop;
  window.autoSubmitGetStatus = () => ({ isRunning, retryCount });

  // Listen cho messages t·ª´ content script
  window.addEventListener('message', (event) => {
    if (event.source !== window) return;

    if (event.data.type === 'AUTO_SUBMIT_START') {
      start();
    } else if (event.data.type === 'AUTO_SUBMIT_STOP') {
      stop();
    } else if (event.data.type === 'AUTO_SUBMIT_STATUS') {
      window.postMessage({
        type: 'AUTO_SUBMIT_STATUS_RESPONSE',
        isRunning: isRunning,
        retryCount: retryCount
      }, '*');
    }
  });

  log('‚úÖ Extension v2 ƒë√£ ƒë∆∞·ª£c load! Override window.alert th√†nh c√¥ng!', 'success');

})();
